//Functional Interfaces
Supplier - T get(){ return T }-> Supplier<String> s = ()-> {return new String()}
Consumer - void accept(T t){} -> Consumer<String> c = (t) -> System.out.println(t); list.forEach((t)-> System.out.println(t));
BiConsumer - void accept(T t, U u){} -> BiConsumer<String,String>bc = (t, u)->{t = t+u}
Predicate - boolean test(T t){ return true/false}
BiPredicate - boolean test(T t, U u) { return true/false}
Function -  R apply( T t){} -> Function<String,Integer> ->(t)->{ return r;}
BiFunction - R apply ( T t, U u) -> BiFunction<T,U,R> ->(t, u)->{return r}
UnaryOperator - T apply(T t){ return t} - UnaryOperator<T> = (t)->{return t}
BinaryOperator - T apply(T t1, t t2){ return t1+t2}- BinaryOperator<T> = (t1,t2)->{ return T}

//Optional - replacement for returning nulls from your method

//PrimitiveSpecific function interfaces

IntSupplier,LongSupplier,DoubleSupplier, BooleanSupplier
IntConsumer, LongConsumer, DoubleConsumer
IntPredicate, LongPredicate, DoublePredicate
IntFunction,LongFunction,DoubleFunction 
IntUnaryOperator,LongUnaryOperator,DoubleUnaryOperator
IntBinaryOperator, LongBinaryOperator, DoubleBinaryOperator

//R  apply(T t){}
ToDoubleFunction
ToIntFunction
ToLongFunction
// R apply(T t, U u)
ToDoubleBiFunction
ToIntBiFunction
ToLongBiFunction

//R  apply(T t){}
DoubleToIntFunction
DoubleToLongFunction
LongToIntFunction
LongToDoubleFunction
IntToLongFunction
IntToDoubleFunction
// void accept( T t, U u){}
ObjIntConsumer
ObjLongConsumer
ObjDoubleConsumer


